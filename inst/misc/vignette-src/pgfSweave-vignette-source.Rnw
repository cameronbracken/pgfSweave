% !TEX TS-program = pgfSweave
\RequirePackage{atbegshi}
\documentclass{article}

\usepackage[utf8]{inputenc}
%\usepackage[T1]{fontenc}
%\usepackage[scaled=0.85]{beramono}

%% $ R CMD pgfsweave pgfSweave-vignette-source.Rnw

% \VignetteIndexEntry{The pgfSweave Package}
% \VignetteDepends{pgfSweave}
% \VignetteDepends{tikzDevice}

\usepackage[x11names]{xcolor}
\usepackage{tikz}
\usetikzlibrary{positioning,shapes.geometric,arrows}
\usepackage[nogin,noae]{Sweave}

\usepackage[parfill]{parskip}
\usepackage{fancyvrb}
\usepackage[margin=1.1in]{geometry}
\usepackage[colorlinks]{hyperref}
\newcommand{\lang}{\textsf}
\newcommand{\code}{\texttt}
\newcommand{\pkg}{\textbf}
\newcommand{\ques}[1]{\vspace{.5cm}\noindent{\bf\large#1}\vspace{.2cm}}

\title{The \pkg{pgfSweave} Package}
\author{Cameron Bracken and Charlie Sharpsteen}

\begin{document}

<<setup,echo=F>>=
  require(cacheSweave)
  setCacheDir("cache")
  require(tikzDevice)
  if(!file.exists('figs')) dir.create('figs')
@

%% Cache all of the code chunks and generate external figures by default 
%% the pgfSweave defaults are pdf=FALSE and eps=FALSE and pgf=FALSE and tikz=TRUE.
%% to get normal Sweave behavior set pgf=FALSE and external=FALSE 
\SweaveOpts{prefix.string=figs/fig,fig=T,eps=F,pdf=F,cache=T,tikz=T,external=T}

\begin{center}
{\Large The \pkg{pgfSweave} Package}\\
{\large Cameron Bracken and Charlie Sharpsteen \\ \today}\\
http://cran.r-project.org/web/packages/pgfSweave/index.html
\vspace{1cm}
\end{center}

\tableofcontents

\clearpage
\section{Introduction} 
The \pkg{pgfSweave} package is about {\color{SteelBlue1}speed} and {\color{Sienna1}style}.  For {\color{SteelBlue1}speed}, the package provides capabilities for ``caching'' graphics generated with \pkg{Sweave} on top of the caching funcitonality of \pkg{cacheSweave}\footnote{\url{http://cran.r-project.org/web/packages/cacheSweave/index.html}}.  For {\color{Sienna1}style} the \pkg{pgfSweave} package facilitates the integration of \lang{R} graphics with \LaTeX\ reports through the \pkg{tikzDevice}\footnote{\url{http://cran.r-project.org/web/packages/tikzDevice/index.html}} package.  With these tools, figure labels are converted to \LaTeX{} strings so they match the style of the document and the full range of \LaTeX{} math symbols/equations are available.  In addition \pkg{pgfSweave} can produce syntax highlighted and/or cleaned up source code. 

The backbone of \pkg{pgfSweave} is a a new driver for \pkg{Sweave} (\code
{pgfSweaveDriver}). The driver provides new chunk options \code{tikz}, \code{pgf} and \code
{external}, \code{sanitize}, \code{highlight} and \code{tidy} on top of the \code{cache} option provided by \pkg{cacheSweave}.  This package 
started as a fork of \pkg{cacheSweave}. This document highlights the features and usage of 
\pkg{pgfSweave}.  This document assumes familiarity with \pkg{Sweave}.  

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Motivation and Background} 

\pkg{Sweave} is a tool for generating ``reproducible research'' documents by embedding \lang{R} or \lang{S} ``code chunks'' directly into a \LaTeX{} document.  For small projects, this approach works well.  For large papers or projects, heavy data analysis or computation can cause document compilation times that are unacceptable.  The problem of performing lengthy computations in Sweave documents is not a new one.  Previous attempts to tackle this problem include the \pkg{cacheSweave} and \pkg{weaver}\footnote{\url{http://www.bioconductor.org/packages/2.3/bioc/html/weaver.html}} packages.  These packages address the problem that code chunks with lengthy computations are executed every time a document is compiled.  Both packages provide a \code{cache} option which saves R objects for quick access during successive compilations. The \pkg{cacheSweave} package stores results in a \pkg{filehash}\footnote{\url{http://cran.r-project.org/package=filehash}} databases while the \pkg{weaver} package stores RData files.  The benefit of the \pkg{cacheSweave} method is lazy loading of objects.  Both methods provide significant speedup for most \pkg{Sweave} documents, namely those which create objects in the global environment.

The existing methods have some drawbacks:

\begin{enumerate} 
\item Plots are not cached (since plots do not generally create objects in the global environment). If a plot takes a long time to generate, the same problem exists as when lengthy computations are present.  Ideally we would like to reuse a plot if the code that generated it has not changed. 
\item Consistency in style (font, point size) in automatically generated graphics is difficult to achieve.  The default font and point size in \lang{R} does not match \LaTeX{} very well and getting this to match precisely is tricky business.  The previously mentioned tools, \pkg{tikzDevice} and \pkg{eps2pgf}, counter this but using them with \pkg{Sweave} manually can be cumbersome.
\end{enumerate}

The \pkg{pgfSweave} package addresses these drawbacks.  The so called ``caching'' of plots is achieved with the help of two tools: the \TeX{} package \pkg{PGF}\footnote{\url{http://sourceforge.net/projects/pgf/}}  and the \lang{R} package \pkg{tikzDevice}.  When we refer to the ``caching'' of a graphic we mean that if the code chunk which generated the graphic is unchanged, an image included from a file rather than regenerated from the code.  The \TeX{} package \pkg{pgf} provides the ability to ``externalize graphics.''  The effect of externalization is that graphics get extracted and compiled separately, saving time on subsequent compilations.  The externalization chapter in the \pkg {PGF/Ti\textit{k}Z} manual is extremely well written, and we refer the interested user there for more information.  Externalization plus some clever checking on the part of \pkg{pgfSweave} makes up the caching mechanism.  

The plot style consistency drawback is addressed by the handy options \code{tikz} and \code
{pgf} which allow for graphics to be output in these formats. Again, it is possible to do this 
manually but the chunk options make things easier. 


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{System Requirements}
In general \pkg{pgfSweave} depends on:
\begin{enumerate}
\item A working \TeX{} distribution (such as TeXLive for linux and mac and MiKTex for Windows)
\item At least version 2.10 of the \pkg{PGF/Ti\textit{k}Z} package for \LaTeX{}.
\item The GNU make utility for externalizing graphics. 
\end{enumerate}

That should be it for any *nix or Mac OS X system. 

\subsection{Windows specific requirements}

The \pkg{pgfSweave} package can work on Windows with some special care.  First of all it is strongly recommended that R be installed in a location that does not have spaces in its path name such as \texttt{C:$\backslash$R}.  This will save much grief when using \pkg{Sweave}. In addition, do the following in the order listed. 

\begin{enumerate}
\item Install MiK\TeX{}. 
\item Upgrade to or install PGF 2.10 if not already done (the command mpm).
\item Install Rtools\footnote{\url{http://www.murdoch-sutherland.com/Rtools/}}. Make sure to allow the Rtools installer to modify your PATH.  
\end{enumerate}

If everything is set up correctly, the commands \code{make} and \code{pdflatex} or \code{latex} should be available at the command prompt.    



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Usage}

We assume a familiarity with the usage of \pkg{Sweave}, for more information see the \pkg{Sweave} manual.\footnote{\url{http://www.stat.uni-muenchen.de/~leisch/Sweave/Sweave-manual.pdf}}  This section will explain the usage of the \code{tikz}, \code{pgf} and \code{external} options and then provide a complete example.

\subsection{The \code{tikz} option}
The first new code chunk option, \code{tikz}, acts the same as the \code{pdf} or \code{eps} options but instead of resulting in an \code{$\backslash$includegraphics\{\}} statement the 
result is an \code{$\backslash$input\{\}} statement. Consider the following code:

\begin{minipage}[!ht]{.5\linewidth}
Input:
\begin{Verbatim}[frame=single]
 \begin{figure}[ht]
 <<tikz-option,fig=T,tikz=T,echo=F>>=
     x <- rnorm(100)
     plot(x)
 @  
 \caption{caption}
 \label{fig:tikz-option}
 \end{figure}
\end{Verbatim}
\end{minipage}
\begin{minipage}[!ht]{.5\linewidth}
Output:
\begin{Verbatim}[frame=single]
 \begin{figure}[ht]
 \input{tikz-option.tikz}
 \caption{caption}
 \label{fig:tikz-option}
 \end{figure}
\end{Verbatim}
\end{minipage}

\vspace{.5cm}
The \code{.tikz} file is generated with the \pkg{tikzDevice} package.  {\color{red} This is the default graphics output for \pkg{pgfSweave}, the \code{tikz} option is set to \code{TRUE} by default.}

\subsection{The \code{pgf} option}

{\color{red} This option is depreciated, please use the \code{tikz} option instead.}

The second new code chunk option \code{pgf}, acts the same as the tikz option in that the result is an \code{$\backslash$input\{\}} statement.  Consider the following code:

\begin{minipage}[!ht]{.5\linewidth}
Input:
\begin{Verbatim}[frame=single]
 \begin{figure}[ht]
 <<pgf-option,fig=T,pgf=T,tikz=F,echo=F>>=
     x <- rnorm(100)
     plot(x)
 @  
 \caption{caption}
 \label{fig:pgf-option}
 \end{figure}
\end{Verbatim}
\end{minipage}
\begin{minipage}[!ht]{.5\linewidth}
Output:
\begin{Verbatim}[frame=single]
 \begin{figure}[ht]
 \input{pgf-option.pgf}
 \caption{caption}
 \label{fig:pgf-option}
 \end{figure}
\end{Verbatim}
\end{minipage}

\vspace{.5cm}

The \code{.pgf} file is generated with the \pkg{eps2pgf} utility. The \code{postscript} graphics device is used first to generate a \code{.eps} file.  Then the command \begin{verbatim}$ java -jar /path/to/eps2pgf.jar -m directcopy graphic.eps\end{verbatim} is run on every code chunk that has \code{fig=TRUE} and \code{pgf=TRUE}.  We do not  recommend using this option in favor of the \code{tikz} option.  Using the \code{pgf} option  involves two creation steps instead of one and it strips the \lang{R} text styles (such as boldface).

\subsection{The \code{sanitize} option}

This option is a boolean value that accesses the \code{tikz()} option of the same name.  Please see the \code{tikz()} documentation for more details. 

\subsection{The \code{external} option}

Externalization is a feature of the TikZ package that is the main component of graphics caching in \pkg{pgfSweave}. Graphics that don't change between successive runs will not be re-compiled, but simply included as pdf files.  For very complex graphs, this may not actually save much time as the inclusion of the large pdf will still take significant time. In these situations, you may want to consider using raster graphics (such as png). 

Before version 1.2, \pkg{pgfSweave} used the `old' method of externalizing graphics (\verb"\beginpgfgraphicnamed"...). This method works fine but is fairly limited in terms of cool features. As of version 1.2, \pkg{pgfSweave} uses the `new' externalization via the TikZ externalization library. This library has a lot of cool bells and whistles and can even make some speed improvements over the old method. {\color{red} Please refer to the pgf manual for a comprehensive overview of the TikZ externalization library}. 

The new method uses the externalization library feature \texttt{list and make}. To quote from the TikZ manual:

\begin{quote}
The mode \texttt{list and make} is similar to \texttt{list only}: it generates the same file {$<$main file$>$}.figlist, but any images which exist already are included as graphics instead of ignoring them. Furthermore, this mode generates an additional file: {$<$main file$>$}.makefile. This allows to use a work flow like

\begin{Verbatim}
% step 1: generate main.makefile: 
pdflatex main 
% step 2: generate ALL graphics on 2 processors: 
make -j 2 main.makefile 
% step 3: include the graphics: 
pdflatex main
\end{Verbatim}

This last make method is, however unnecessary: \texttt{list and make} just assumes that images are generated somehow (not necessarily with the generated makefile). The generated makefile allows parallel externalization of graphics on multi-core systems and it supports any file dependencies configured with \verb"\tikzpicturedependsonfile".
\end{quote}

Input:
\begin{Verbatim}[frame=single]
 \begin{figure}[ht]
 <<external,fig=T,tikz=T,external=T,echo=F>>=
     x <- rnorm(100)
     plot(x)
 @  
 \caption{caption}
 \label{fig:external-option}
 \end{figure}
\end{Verbatim}

Output:
\begin{Verbatim}[frame=single]
 \begin{figure}[ht]
 \tikzsetnextfilename{external}
 \tikzexternalfiledependsonfile{external}{external.tikz}
 \input{external}
 \caption{caption}
 \label{fig:external}
 \end{figure}
\end{Verbatim}

 This both registers the graphic to externalize, generating an entry in the makefile for it, and registers a dependency on the tikz file itself so that if it is changed, the graphic is re-externalized. After the \pkg{Sweave} process is done, it is necessary to run \texttt{pdflatex} and make as in the quote from the \texttt{pgf} manual.
 

\subsection{The \code{$\backslash$tikzexternalize} commmand}

The \pkg{pgfSweave} will automatically add the lines
\begin{Verbatim}
  \usetikzlibrary{external}
  \tikzexternalize[mode=list and make]
\end{Verbatim}
below the \verb"\usepackage{tikz}" command. The use of TikZ externalization library with \pkg{pgfSweave} requires these lines.  You may want to customize the options to the externalization library, for example to generate eps graphics, to do this you should use \verb"\tikzset". See the externalization library documentation in the pgf manual to see how. An example is shown in the next section.
 
\subsection{Generating other graphics formats (was `The \code{tex.driver} option (Externalization Driver)`}

As of version 1.2, the \texttt{text.driver} option is defunct. This was never really a well developed feature and the TikZ externalization driver provides a much better mechanism for generating different graphics formats (eps for example).  It is also possible to generate multiple formats at once. For example, to generate a eps and pdf version of your graphic, use the following line below \verb"\usepackage{tikz}"

\begin{Verbatim}[frame=single]
\tikzset{external/system call={latex \tikzexternalcheckshellescape -halt-on-error 
  -interaction=batchmode -jobname "\image" "\texsource"; 
  dvips -o "\image".eps "\image".dvi;
  pdflatex \tikzexternalcheckshellescape -halt-on-error 
  -interaction=batchmode -jobname "\image" "\texsource";}}
\end{Verbatim}
  
Similarly you can use this method to generate Bitmap graphics, see the example in section 32.7 ``Bitmap Graphics Export'' of the pgf 2.10 manual. 

This method can also be used to work with plain latex.  The process is a bit kludgy, but it works. Use a similar line as above the generate an eps graphic then around the graphic:

\begin{Verbatim}[frame=single]
\begin{figure}[!ht]
\centering
{
\pgfkeys{/pgf/images/include external/.code={\includegraphics[width=3in]{#1}}}
 <<plainlatex,echo=F,fig=T,width=3,height=3,tikz=T,external=T>>=
  x <- rnorm(100)
   plot(x)
 @
}% this brace ends the effect of ‘include external’
\caption{plain latex}
\end{figure}
\end{Verbatim}

Then the compilation process would be 

\begin{Verbatim}[frame=single]
  % generate tex file
R CMD pgfSweave --pgfsweave-only main.Rnw 
  % generate makefile
latex main.tex 
  % externalize graphics
make -f main.makefile
  % include the graphics 
latex main.tex 
  % finally create a pdf file
dvipdf main.dvi
\end{Verbatim}

\subsection{The \code{highlight} option}
Version 1.1.0 of \pkg{pgfSweave} introduced the \code{highlight} option.  The default is \code{TRUE} by default so code will be syntax-highlighted with the \pkg{highlight} package. To disable highlighting add \code{\textbackslash SweaveOpts\{highlight=F\}} to disable it. This option can be combined with the \code{keep.source} option or the \code{tidy} option.  For example:

The original code in the chunk looks like:

\begin{Verbatim}
        # here is a comment
    x <- numeric(100)
    for( i in 1:100){
        x[i] <- rnorm(1)
    }
        # OR
    y <- rnorm(100)  # and another comment
    
    plot(x,y)
\end{Verbatim}

Normal:
<<nohi,echo=T,highlight=F,fig=F>>=
        # here is a comment
    x <- numeric(100)
    for( i in 1:100){
        x[i] <- rnorm(1)
    }
        # OR
    y <- rnorm(100)  # and another comment
    
    plot(x,y)
@

With Highlighting:
<<hi,echo=T,highlight=T,fig=F>>=
        # here is a comment
    x <- numeric(100)
    for( i in 1:100){
        x[i] <- rnorm(1)
    }
        # OR
    y <- rnorm(100)  # and another comment

    plot(x,y)
@

\subsection{The \code{tidy} option}
Version 1.1.0 of \pkg{pgfSweave} introduced the \code{tidy} option.  This functionality was built into earlier releases, but is now available as an option for greater control.  Setting this chunk option to \code{TRUE} will clean up your code with an internal version of the \code{tidy.source} function from the \code{formatR} package. Using this option will not only preserve comments in the code but will reformat it's appearance.  This option takes precedent over the \code{keep.source} function but can be combined with the \code{highlight} option. Using the previous example:

Default (highlighting only, cleaned up with parse):
<<notidy,echo=T,tidy=F,fig=F>>=
        # here is a comment
    x <- numeric(100)  # here is a comment
    for( i in 1:100){ x[i] <- rnorm(1)}
    z <- rnorm(100)  # and another comment
    
    plot(x,z)
@

Normal with \code{keep.source=T} (highlighting only, not cleaned up):
<<notidy,echo=T,tidy=F,fig=F,keep.source=T>>=
        # here is a comment
    x <- numeric(100)  # here is a comment
    for( i in 1:100){ x[i] <- rnorm(1)}
    z <- rnorm(100)  # and another comment
    
    plot(x,z)
@

Only Tidying:
<<tidy,echo=T,tidy=T,highlight=F,fig=F>>=
    # here is a comment
x <- numeric(100)  # here is a comment
for( i in 1:100){ x[i] <- rnorm(1)} 
y <- rnorm(100)  # and another comment

plot(x,y)
@

With Tidying and highlighting:
<<tidy,echo=T,tidy=T,fig=F>>=
    # here is a comment
x <- numeric(100)  # here is a comment
for( i in 1:100){ x[i] <- rnorm(1)}
y <- rnorm(100)  # and another comment

plot(x,y)
@

NOTE: Inline comments are defined by the \code{tidy.source()} function to be ``two or more spaces plus the hash symbol \# in your source code.'' Two hash symbols will also not work. 

\subsection{Compilation Time}
The combination of \pkg{cacheSweave} code caching and \pkg{pgfSweave} figure caching can provide drastic decrease in compilation time.  The time speedup is highly dependednt on what code you are executing but using \pkg{pgfSweave} effectivly reduces the compilation time of \pkg{Sweave} to the time it takes to compile the \LaTeX{} document. 

\subsection{A Complete Example}
At this point we will provide a complete example.  The example from the \pkg{Sweave} manual is used to highlight the differences. The two frame below show the input Sweave file \texttt{pgfSweave-example-Rnw.in} and the resulting tex file \texttt{pgfSweave-example-tex.in}.

\VerbatimInput[frame=single,label={pgfSweave-example{}.Rnw},labelposition=all]{../../example/pgfSweave-example.Rnw}

On the input file run:
\begin{Verbatim}
R> library(pgfSweave)
R> pgfSweave('example.Rnw',pdf=T)
\end{Verbatim}

or 

\begin{Verbatim}
$ R CMD pgfsweave example.Rnw
\end{Verbatim}

And we get (from compiling \texttt{pgfSweave-example.tex}):

%\VerbatimInput[frame=single,label={pgfSweave-example{}.tex},labelposition=all]{../../example/pgfSweave-example.tex}

\begin{figure}[!hp]
\framebox{\includegraphics[width=\textwidth]{../../example/pgfSweave-example.pdf}}
\end{figure}

\clearpage

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{The Process}
The process that \pkg{pgfSweave} uses when caching and externalization are turned on is outlined in the flow chart below:

%\tikzsetnextfilename{figs/flow}
\begin{figure}[!ht]
\centering
\begin{tikzpicture}
    [
    node distance=4mm and 9mm,
    scale=.8,
    block/.style ={
        rectangle, 
        draw=gray!80, 
        thick, 
        top color=gray!20, 
        bottom color=white,
        text badly centered, 
        text width=7em
    },
    decision/.style={
        diamond, 
        draw=gray!80, 
        thick, 
        top color=gray!20, 
        bottom color=white,
	    text width=5em, 
	    text centered, 
	    inner sep=0pt
	},
	a/.style={
		-stealth',
		draw=gray
	}
    ]

    \node (init)[block,text width=10em,rounded corners,] {Examine code chunk};
    \node (past) [decision,below=of init] {Has the code chunk changed from a previous run?};
    \node (run) [block,right=of past] {Run the chunk and cache the results};
    \node (lazy) [block,below=of past] {Lazyload the results};
    \node (plotting) [decision,below=of lazy] {Did the chunk do any plotting?};
    \node (move) [block,left=of plotting] {Move on to next chunk};
    \node (extern)[decision,below=of plotting] {Is the graphic non-existant or has the chunk changed?};
    \node (doextern)[block,right=of extern] {Generate the graphic and the extenaliztion commands};
    \node (out)[decision,below=of extern] {Out of chunks?};
    \node (end)[block,text width=25em,rounded corners,below=of out] {End (Still need to run externalization commands)};
    
    \draw[a] (init) edge (past);
    \draw[a] (past) edge node [above] {yes} (run);
    \draw[a] (past) edge node [left] {no} (lazy);
    \draw[a] (lazy) -- (plotting);
    \draw[a] (run) |- (plotting);
    \draw[a] (plotting) edge node [left] {yes} (extern);
    \draw[a] (plotting) -- node [above] {no} (move);
    \draw[a] (extern) edge node [above] {yes} (doextern);
    \draw[a] (extern) -| node [left] {yes} (move);
    \draw[a] (extern) edge node [left] {no} (out);
    \draw[a] (out) -| node [left] {no} (move);
    \draw[a] (doextern) |- (out);
    \draw[a] (out) -- (end);
    \draw[a] (move) |- (past);
    
\end{tikzpicture}
\caption{Flow chart of \pkg{pgfSweave} procedure.}\label{flow}
\end{figure}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Consistency in style between graphics and text}
%% initial calculations
<<first,echo=F,results=hide,fig=F>>=
a <- rnorm(1000)
b <- a * .4 * rnorm(100, sd = 0.8)
fit <- lm(b ~ a)
@

 In Figure \ref{normalSweave}, notice the inconsistency in font and size between the default \lang{R} output and the default \LaTeX{} output.  Fonts and font sizes can be changed from \lang{R} but it is hard to be precise.  What if you decide to change the font and and point size of your entire document?  In Figure \ref{pgfSweave-hist} and \ref{pgfSweave-tikz-hist} the text is consistent with the rest of the document.

\begin{figure}[!ht]
\begin{minipage}{.45\linewidth}
\centering
<<normalSweave,echo=F,pdf=T,tikz=F,external=F,width=3,height=3>>=
hist(rnorm(10000))
@
\caption{This is normal \pkg{Sweave}.}\label{normalSweave}
\end{minipage}
\begin{minipage}[!ht]{.45\linewidth}
%% pgf file will get regenerated every time slowing down the whole compilation.
%% even though cache=TRUE. 
\centering
<<pgfSweave-hist,echo=F,tikz=F,pgf=T,width=3,height=3>>=
hist(rnorm(10000))
@
\caption{This is from \pkg{pgfSweave} with the \code{pgf} option.}\label{pgfSweave-hist}
\end{minipage}
\end{figure}

\begin{figure}[!ht]
%% pgf file will get regenerated every time slowing down the whole compilation.
%% even though cache=TRUE. 
\centering
<<pgfSweave-tikz-hist,echo=F,width=3,height=3>>=
hist(rnorm(10000))
@
\caption{This is from \pkg{pgfSweave} with the \code{tikz} option.}\label{pgfSweave-tikz-hist}
\end{figure}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Sweave graphic width defaults}

The default in \code{Sweave.sty} is to fix the width of every image to 80\% of the text width by using \verb"\setkeys{Gin}{width=.8\textwidth}".  Say you have a 7 in text width and code chunk where you set \code{width=4}.  The original 4 inch wide graphic will have text size matching your document but when it is included in your document it will be scaled up to 7 inched wide and the text will get bigger!  This default is quite contrary to the philosophy of \pkg{pgfSweave}.  There are two ways around this before each code chunk you can set \verb"\setkeys{Gin}{width=<graphic width>}". Alternatively (and the recommended way) you can turn off this feature globally by using \verb"\usepackage[nogin]{Sweave}", that way the width and height of the figure are controlled by the arguments to the code chunk. 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Command line interface\label{commandline}}

In versions 0.7.0, \pkg{pgfSweave} got an \code{R CMD} command line interface.  On Unix alikes (including Mac OS X) a symbolic link \code{\$R\_HOME/bin/pgfsweave} to \code{\$R\_HOME/library/pgfSweave/exec/pgfsweave-script.R}.  On Windows a copy of the script is made instead.  {\color{red} This script is only installed if pgfSweave is installed from source}.

Here is a listing from \code{R CMD pgfsweave --help}:

\begin{Verbatim}[frame=single]
	usage:  
	    R CMD pgfsweave [options] file

	    A simple front-end for pgfSweave()

	    The options below reference the following steps 
	      (1) Run Sweave using pgfSweaveDriver
	      (2) Run the pgf externalization commands
	      (3) Compile the resulting tex file using texi2dvi()

	    Default behavior (no options) is to do (1), (2) then (3) in that order.

	    Package repositories: 
	    http://github.com/cameronbracken/pgfSweave (cutting edge development)
	    http://r-forge.r-project.org/projects/pgfsweave/ (precompiled dev versions)
	    http://cran.r-project.org/web/packages/pgfSweave/index.html (stable release)

	options:
		-v, --version
			Print version info and exit

		-d, --dvi
			dont use texi2dvi() option pdf=T i.e. call plain latex to produce a dvi
			file instead of a pdf

		-p NUMBER, --processors=NUMBER
			Number of processors to use for graphics externalization [default 2]

		-n, --graphics-only
			dont do (3), do (1) then (2); ignored if --pgfsweave-only is used

		-s, --pgfsweave-only
			dont do (2) or (3), only do (1)

		-h, --help
			Show this help message and exit

\end{Verbatim}

\clearpage
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Frequently Asked Questions}

%--------------------------------------
%--------------------------------------
\ques{Can \pkg{pgfSweave} be run from the command line?}

Yes! See section \ref{commandline}.
\begin{Verbatim}
$ R CMD pgfsweave <yourfile>.Rnw
\end{Verbatim}

%--------------------------------------
%--------------------------------------
\ques{Can \pkg{pgfSweave} be used to generate eps}

Yes! See section \ref{commandline}.
\begin{Verbatim}
$ R CMD pgfsweave <yourfile>.Rnw
\end{Verbatim}

%--------------------------------------
%--------------------------------------
\ques{The changes to my code chunk are not being recognized.}

Occasionally \pkg{pgfSweave} suffers from overzealous caching.  In these cases it may be necessary to manually delete the cache or the figure files. This is something we need to improve but this is better than compiling too often which is what used to happen. 

%--------------------------------------
%--------------------------------------
\ques{How do I set subdirectories for figures and caches?}

This is straight out of the \pkg{Sweave} and \pkg{cacheSweave} manuals (nothing new here).  For a figures subdirectory \footnote{make sure to create the directory first!} use the \code{prefix.string} option:

\begin{verbatim}\SweaveOpts{prefix.string=figs/fig}\end{verbatim}

For a caching subdirectory use a code chunk at the beginning or your document like:
\begin{verbatim}
	<<setup,echo=F>>=
	setCacheDir("cache")
	@
\end{verbatim}

%--------------------------------------
%--------------------------------------
\ques{Why are the width and height options being ignored?}

This is another one from \pkg{Sweave}. You must use the \code{nogin} option in \code{Sweave.sty} for the width and height parameters to actually affect the size of the image in the document:
\begin{verbatim}\usepackage[nogin]{Sweave}\end{verbatim}

%--------------------------------------
%--------------------------------------
\ques{\LaTeX{}/PDF\LaTeX{} is not found in R.app (Mac OS X) and [Possibly] R.exe (Windows)}

Your latex program is not in the default search path.  Put a line such as:

\begin{verbatim}Sys.setenv("PATH" = paste(Sys.getenv("PATH"),"/usr/texbin",sep=":"))\end{verbatim}
in your \verb".Rprofile" file.  

%--------------------------------------
%--------------------------------------
\ques{I get a bunch of ``Incompatible list can't be unboxed'' errors when compiling.}

This is a problem with the CVS version of PGF.  The workaround is to load the \pkg{atbegshi} package before PGF or TikZ:

\begin{verbatim}
 \usepackage{atbegshi}
 \usepackage{pgf}
\end{verbatim}

or

\begin{verbatim}
  \usepackage{atbegshi}
  \usepackage{tikz}
\end{verbatim}

%--------------------------------------
%--------------------------------------
\ques{The vignette in \texttt{/inst/doc/} does not contain any code chunks!}

That is because the vignette in \texttt{/inst/doc/} is a ``fake'' vignette generated from the ``real'' vignette in \texttt{/inst/misc/vignette-src/}.  The reason for this extra step is  that package vignettes must be able to be compiled with \texttt{R CMD Sweave}, which is precisely what we don't want to use!

To compile the vignette yourself, download the package source, unpack it and then do the following:

\begin{verbatim}
git clone git://github.com/cameronbracken/pgfSweave.git
R CMD INSTALL pgfSweave
cd pgfSweave/inst/misc/vignette-src/
make
\end{verbatim}
Which will create \code{pgfSweave-vignette-source.pdf}

\section{Additional Resources}
This is an on going list of third-party resources for \pkg{pgfSweave}. Suggestions for this list are welcome. 

\begin{itemize}
  
  \item \url{http://code.cjb.net/pgfSweave.html}
  
  \item \url{http://yihui.name/en/tag/pgfsweave/}
  
\end{itemize}

\end{document}
